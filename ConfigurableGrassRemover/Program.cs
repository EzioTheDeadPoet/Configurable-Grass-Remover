using System;
using System.Collections.Generic;
using System.Linq;

using Noggog;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using System.Threading.Tasks;
using Mutagen.Bethesda.Plugins;

namespace ConfigurableGrassRemover
{
    public class Program
    {
        private static Lazy<Settings> _lazySettings = null!;
        private static Settings Settings => _lazySettings.Value;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname:"Settings",
                    path: "settings.json",
                    out _lazySettings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "Grass Remover.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            Mode mode = Settings.Mode;
            HashSet<IFormLinkGetter<IWorldspaceGetter>> worldSpaces = Settings.Worldspaces;

            if (mode == Mode.Blacklist)
            {
                foreach (var worldspace in state.LoadOrder.PriorityOrder.Worldspace().WinningOverrides())
                {
                    if (!worldSpaces.Contains(worldspace.AsLinkGetter()))
                    {
                        Worldspace worldspaceDeepCopy = worldspace.DeepCopy();
                        worldspaceDeepCopy.Flags.SetFlag(Worldspace.Flag.NoGrass, true);
                        state.PatchMod.Worldspaces.Set(worldspaceDeepCopy);
                    }
                }
            }

            if (mode == Mode.Whitelist)
            {
                foreach (var worldspace in state.LoadOrder.PriorityOrder.Worldspace().WinningOverrides())
                {
                    if (worldSpaces.Contains(worldspace.AsLinkGetter()))
                    {
                        Worldspace worldspaceDeepCopy = worldspace.DeepCopy();
                        worldspaceDeepCopy.Flags.SetFlag(Worldspace.Flag.NoGrass, true);
                        state.PatchMod.Worldspaces.Set(worldspaceDeepCopy);
                    }
                }
            }
        }
    }
}
